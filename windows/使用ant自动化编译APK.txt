
鉴于QualComm 8930众多的项目分支，每次上传apk都要走三遍流程：
	创建工程、导入代码、导出未签名apk、签名、上传
极其繁琐，而且容易出错，所以考虑避开eclipse，直接使用ant完成所有流程。

0. Ant编译需要build.xml文件，类似于make编译需要Makefile文件

1. android已经实现ant编译了，具体实现在<SDK>/tools/ant/build.xml文件。
编译的时候只需两步：
	更新工程：android update project --path <path/to/your/project>
	编译：ant [help|debug|release|clean]等

2. 实际使用中需要修改ant的property文件(ant.properties)，提供签名所需要的密码信息等：
# key information for signature
key.store=
key.alias=
key.store.password=
key.alias.password=

3. 另外需要添加第三方jar库，对于camera来说就是framework.jar和filter.jar，
只需将这些jar文件放到libs目录即可。
但是ant默认将这些第三方jar文件打包到classes.dex文件中，导致编译时间过长，
而且最终的apk超大(CameraZte.apk能达到10.5M)，所以要设置ant，不要打包第三方的jar文件，
查看<SDK>/tools/ant/build.xml文件，发现如下设置即可达到要求：
<!-- syb. This make out.dex.jar.input.ref empty, otherwise,
	the framework.jar and filter.jar will be embeded into final classess.dex,
	which makes the apk file to be more than 10MB. -->
<path id="out.dex.jar.input.ref" />
即，将out.dex.jar.input.ref置空，否则该值会使用project.classpath路径，这包含了
libs路径，会将第三方jar文件打包。
由于ant会自动复制jar文件到libs目录，所以需要告知ant，jar文件所在的路径：
#
# jar files folder
jars_dir=
#
注意：
	jars_dir这个属性是必须要设置的，也是唯一一个需要手动设置的属性。

4. 方便起见，需要将编译的最终结果bin/Camera-release.apk(项目名称默认为Camera)
复制到各个项目的svn目录下，然后手动提交，所以需要实现一个简单的batch文件，
将一个apk文件复制到多个目录里面去，也就是copy_to_multiple_dir.bat文件。
如果要使用这个功能，需要告知ant，这些目标文件夹的具体路径，这可在ant.properties文件
中进行配置：
# copy final APK to your defined directories, default value is null
# if need copy APK to more than one projects, set dir_list like this:
# dir_list=dir1+dir2+dir3+...
# e.g.
# dir_list=
dir_list=
多个路径之间用加号("+")分割，另外dir_list这个属性可以为空，此时将不进行任何复制，如果这些路径中有的路径不存在，将给出提示，但不会自动创建它们。

5. 还有一个exclude_list.txt文件，该文件是为了源码复制时忽略svn信息而设置的，比如8930平台拉取了三个分支，编译P893A20的时候，需要复制
A20分支的差异化代码，复制时忽略svn信息就需要该文件。没有差异化项目分支的，可以忽略该文件。

6. 最后，首次使用时的使用方法[涉及到的文件均已提交到源码根目录]：
	A. 安装Ant，将Ant目录添加到系统路径，并增加JAVA_HOME系统变量
	B. 修改ant.properties文件，填写jar文件所在的路径，如：jars_dir=   (M$系统注意双斜杠)
	C. [可选] 修改ant.properties文件，填写apk要复制到的目录，如：dir_list=
	D. 在源码目录执行： android update project --path .  // "."表示当前目录，该步骤主要是为了给ant配置SDK路径
	E. 在源码目录执行： ant mifavor
	F. [可选]在源码目录执行： ant clean，该步骤是为了清理源码路径
	
	以后使用时，更新源码之后，只需执行D、E两个步骤即可。如果需要可在build.xml中创建适合自己的target而不使用mifavor这个target.


